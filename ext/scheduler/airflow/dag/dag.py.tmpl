# Code generated by optimus {{.Version}}. DO NOT EDIT.
{{- /*gotype: github.com/odpf/optimus/ext/scheduler/airflow/dag.TemplateContext */ -}}

from datetime import datetime, timedelta

from airflow.configuration import conf
from airflow.models import DAG, Variable
from airflow.operators.python import PythonOperator
from airflow.utils.weight_rule import WeightRule
from kubernetes.client import models as k8s

from __lib import JOB_START_EVENT_NAME, \
JOB_END_EVENT_NAME, \
log_success_event, \
log_retry_event, \
log_failure_event, \
log_job_end, log_job_start
from __lib import optimus_sla_miss_notify, SuperKubernetesPodOperator, \
SuperExternalTaskSensor, ExternalHttpSensor

SENSOR_DEFAULT_POKE_INTERVAL_IN_SECS = int(Variable.get("sensor_poke_interval_in_secs", default_var=15 * 60))
SENSOR_DEFAULT_TIMEOUT_IN_SECS = int(Variable.get("sensor_timeout_in_secs", default_var=15 * 60 * 60))
DAG_RETRIES = int(Variable.get("dag_retries", default_var=3))
DAG_RETRY_DELAY = int(Variable.get("dag_retry_delay_in_secs", default_var=5 * 60))
DAGRUN_TIMEOUT_IN_SECS = int(Variable.get("dagrun_timeout_in_secs", default_var=3 * 24 * 60 * 60))

default_args = {
    "params": {
        "project_name": {{ .Tenant.ProjectName.String | quote}},
        "namespace": {{ .Tenant.NamespaceName.String | quote}},
        "job_name": {{.Job.Name.String | quote}},
        "optimus_hostname": {{.Hostname | quote}}
    },
    {{- if ne .RuntimeConfig.Airflow.Pool "" }}
    "pool": "{{ .RuntimeConfig.Airflow.Pool }}",
    {{- end }}
    {{- if ne .RuntimeConfig.Airflow.Queue "" }}
    "queue": "{{ .RuntimeConfig.Airflow.Queue }}",
    {{- end }}
    "owner": {{.Job.Owner | quote}},
    "depends_on_past": False,
    "retries": {{ if gt .Job.Schedule.Retry.Count 0 -}} {{.Job.Schedule.Retry.Count}} {{- else -}} DAG_RETRIES {{- end}},
    "retry_delay": {{ if gt .Job.Schedule.Retry.Delay 0 -}} timedelta(seconds={{.Job.Schedule.Retry.Delay}}) {{- else -}} timedelta(seconds=DAG_RETRY_DELAY) {{- end}},
    "retry_exponential_backoff": {{if .Job.Schedule.Retry.ExponentialBackoff -}}True{{- else -}}False{{- end -}},
    "priority_weight": {{.Priority}},
    "start_date": datetime.strptime({{ .Job.Schedule.StartDate.Format "2006-01-02T15:04:05" | quote }}, "%Y-%m-%dT%H:%M:%S"),
    {{if .Job.Schedule.EndDate -}}
    "end_date": datetime.strptime({{ .Job.Schedule.EndDate.Format "2006-01-02T15:04:05" | quote}},"%Y-%m-%dT%H:%M:%S"),
    {{- end}}
    "on_failure_callback": log_failure_event,
    "on_retry_callback": log_retry_event,
    "on_success_callback": log_success_event,
    "weight_rule": WeightRule.ABSOLUTE
}

{{- if ne .Job.Description "" -}}
# {{.Job.Description}}
{{- end -}}
dag = DAG(
    dag_id={{.Job.Name.String | quote}},
    default_args=default_args,
    schedule_interval={{ if eq .Job.Schedule.Interval "" }}None{{- else -}} {{ .Job.Schedule.Interval | quote}}{{end}},
    sla_miss_callback=optimus_sla_miss_notify,
    catchup={{ if .Job.Schedule.CatchUp -}}True{{- else -}}False{{- end }},
    dagrun_timeout=timedelta(seconds=DAGRUN_TIMEOUT_IN_SECS),
    tags = [
        {{- range $key, $value := $.Job.Labels}}
        "{{ $value }}",
        {{- end}}
    ]
)

publish_job_start_event = PythonOperator(
    task_id = JOB_START_EVENT_NAME,
    python_callable = log_job_start,
    provide_context=True,
    dag=dag
)

publish_job_end_event = PythonOperator(
    task_id = JOB_END_EVENT_NAME,
    python_callable = log_job_end,
    provide_context=True,
    trigger_rule= 'all_success',
    dag=dag
)

{{- if .RuntimeConfig.Resource }}
    resources = k8s.V1ResourceRequirements (
    {{- if .Job.Resource.Request }}
        requests = {
        {{- if ne .Job.Resource.Request.Memory ""}}
            'memory': '{{.Job.Resource.Request.Memory}}',
        {{- end }}
        {{- if ne .Job.Resource.Request.CPU ""}}
            'cpu': '{{.Metadata.Resource.Request.CPU}}',
        {{- end }}
        },
    {{- end }}
    {{- if .Job.Resource.Limit }}
        limits = {
        {{- if ne .Job.Resource.Limit.Memory ""}}
            'memory': '{{.Job.Resource.Request.Memory}}',
        {{- end }}
        {{- if ne .Job.Resource.Limit.CPU ""}}
            'cpu': '{{.Metadata.Resource.Request.CPU}}',
        {{- end }}
        },
    {{- end }}
    )
{{- end }}


{{- $transformationName := print "transformation_"  .Task.Name | DisplayName }}
{{$transformationName}} = SuperKubernetesPodOperator(
    image_pull_policy="IfNotPresent",
    namespace = conf.get('kubernetes', 'namespace', fallback="default"),
    image = {{  .Task.Image | quote}},
    cmds=[],
    name="{{  .Task.Name | replace "_" "-" }}",
    task_id={{ .Task.Name | quote}},
    get_logs=True,
    dag=dag,
    depends_on_past={{ if .Job.Schedule.DependsOnPast }}True{{- else -}}False{{- end -}},
    in_cluster=True,
    is_delete_operator_pod=True,
    do_xcom_push=False,
    env_vars = [
        k8s.V1EnvVar(name="JOB_NAME",value='{{.Job.Name}}'),
        k8s.V1EnvVar(name="OPTIMUS_HOST",value='{{.Hostname}}'),
        k8s.V1EnvVar(name="JOB_LABELS",value='{{.Job.GetLabelsAsString}}'),
        k8s.V1EnvVar(name="JOB_DIR",value='/data'),
        k8s.V1EnvVar(name="PROJECT",value='{{.Tenant.ProjectName.String}}'),
        k8s.V1EnvVar(name="NAMESPACE",value='{{.Tenant.NamespaceName.String}}'),
        k8s.V1EnvVar(name="INSTANCE_TYPE",value='{{ .ExecutorTask}}'),
        k8s.V1EnvVar(name="INSTANCE_NAME",value='{{ .Task.Name}}'),
        k8s.V1EnvVar(name="SCHEDULED_AT",value='{{ "{{ next_execution_date }}" }}'),
    ],
    {{- if gt .SlaMissDuration 0 }}
    sla=timedelta(seconds={{ .SlaMissDuration }}),
    {{- end }}
    {{- if .RuntimeConfig.Resource }}
    resources = resources,
    {{- end }}
    reattach_on_restart=True
)

# hooks loop start
{{ range $_, $t := .Hooks.List }}
    {{ $hookName := $t.Name | ReplaceDash }}

    hook_{{$hookName}} = SuperKubernetesPodOperator(
        image_pull_policy="IfNotPresent",
        namespace = conf.get('kubernetes', 'namespace', fallback="default"),
        image = "{{ $t.Image }}",
        cmds=[],
        name="hook_{{ $t.Name | replace "_" "-" }}",
        task_id="hook_{{ $t.Name }}",
        get_logs=True,
        dag=dag,
        in_cluster=True,
        is_delete_operator_pod=True,
        do_xcom_push=False,
        env_vars = [
            k8s.V1EnvVar(name="JOB_NAME",value='{{$.Job.Name}}'),
            k8s.V1EnvVar(name="OPTIMUS_HOST",value='{{$.Hostname}}'),
            k8s.V1EnvVar(name="JOB_LABELS",value='{{$.Job.GetLabelsAsString}}'),
            k8s.V1EnvVar(name="JOB_DIR",value='/data'),
            k8s.V1EnvVar(name="PROJECT",value='{{$.Tenant.ProjectName.String}}'),
            k8s.V1EnvVar(name="NAMESPACE",value='{{$.Tenant.NamespaceName.String}}'),
            k8s.V1EnvVar(name="INSTANCE_TYPE",value='{{$.ExecutorHook}}'),
            k8s.V1EnvVar(name="INSTANCE_NAME",value='{{$t.Name}}'),
            k8s.V1EnvVar(name="SCHEDULED_AT",value='{{ "{{ next_execution_date }}" }}'),
            # rest of the env vars are pulled from the container by making a GRPC call to optimus
        ],
        {{- if $t.IsFailHook }}
            trigger_rule="one_failed",
        {{- end }}
        {{- if $.RuntimeConfig.Resource }}
            resources = resources,
        {{- end }}
        reattach_on_restart=True
    )
{{- end }}
# hooks loop ends


# create upstream sensors
{{ $baseWindow := $.Job.Task.Window }}
{{- range $_, $dependency := $.Job.Dependencies}}
{{- $dependencySchema := $dependency.Job.Task.Unit.Info }}
{{ $dependencyName := $dependency.Job.Name | DisplayName }}
wait_{{ $dependencyName }} = SuperExternalTaskSensor(
    optimus_hostname="{{$.Hostname}}",
    upstream_optimus_project="{{$dependency.Project.Name}}",
    upstream_optimus_namespace="{{$dependency.Job.NamespaceSpec.Name}}",
    upstream_optimus_job="{{$dependency.Job.Name}}",
    window_size="{{ $baseWindow.GetSize }}",
    window_version=int("{{ $baseWindow.GetVersion }}"),
    poke_interval=SENSOR_DEFAULT_POKE_INTERVAL_IN_SECS,
    timeout=SENSOR_DEFAULT_TIMEOUT_IN_SECS,
    task_id="wait_{{$dependency.Job.Name | trunc 200}}-{{$dependencySchema.Name}}",
    dag=dag
)
{{- end}}

{{- range $_, $dependency := $.Job.ExternalDependencies.OptimusDependencies}}
{{ $identity := print $dependency.Name "-" $dependency.ProjectName "-" $dependency.JobName }}
{{ $identityName := $identity | DisplayName}}
wait_{{ $identityName }} = SuperExternalTaskSensor(
    optimus_hostname="{{$dependency.Host}}",
    upstream_optimus_project="{{$dependency.ProjectName}}",
    upstream_optimus_namespace="{{$dependency.NamespaceName}}",
    upstream_optimus_job="{{$dependency.JobName}}",
    window_size="{{ $baseWindow.GetSize }}",
    window_version=int("{{ $baseWindow.GetVersion }}"),
    poke_interval=SENSOR_DEFAULT_POKE_INTERVAL_IN_SECS,
    timeout=SENSOR_DEFAULT_TIMEOUT_IN_SECS,
    task_id="wait_{{$dependency.JobName | trunc 200}}-{{$dependency.TaskName}}",
    dag=dag
)
{{- end}}

{{- range $_, $httpDependency := $.Job.Upstream.HttpUpstreams}}  # merged from http and optimus?
headers_dict_{{$httpDependency.Name}} = {
    {{- range $k, $v := $httpDependency.Headers}} '{{$k}}': '{{$v}}', {{- end}}
}
request_params_dict_{{$httpDependency.Name}} = {
    {{- range $key, $value := $httpDependency.Params}} '{{$key}}': '{{$value}}', {{- end}}
}

wait_{{$httpDependency.Name}} = ExternalHttpSensor(
    endpoint='{{$httpDependency.Url}}',
    headers=headers_dict_{{$httpDependency.Name}},
    request_params=request_params_dict_{{$httpDependency.Name}},
    poke_interval=SENSOR_DEFAULT_POKE_INTERVAL_IN_SECS,
    timeout=SENSOR_DEFAULT_TIMEOUT_IN_SECS,
    task_id='wait_{{$httpDependency.Name| trunc 200}}',
    dag=dag
)
{{- end}}

# arrange inter task dependencies
####################################

# upstream sensors -> base transformation task
{{- range $i, $t := $.Job.Dependencies }}
publish_job_start_event >> wait_{{ $t.Job.Name | DisplayName }} >> {{$transformationName}}
{{- end}}
{{- range $_, $t := $.Job.ExternalDependencies.HTTPDependencies }}
publish_job_start_event >>  wait_{{ $t.Name }} >> {{$transformationName}}
{{- end}}
{{- range $_, $dependency := $.Job.ExternalDependencies.OptimusDependencies}}
{{ $identity := print $dependency.Name "-" $dependency.ProjectName "-" $dependency.JobName }}
publish_job_start_event >> wait_{{ $identity | DisplayName }} >> {{$transformationName}}
{{- end}}
{{if and (not $.Job.Dependencies) (not $.Job.ExternalDependencies.HTTPDependencies) (not $.Job.ExternalDependencies.OptimusDependencies)}}
# if no sensor and dependency is configured
publish_job_start_event >> {{$transformationName}}
{{end}}

# setup hooks and dependencies
# start_event -> [Dependency/HttpDep/ExternalDep/PreHook] -> Task -> [Post Hook -> Fail Hook] -> end_event

# setup hook dependencies
{{- range $_, $h := .Hooks.Pre }}
    publish_job_start_event >> hook_{{$h.Name | ReplaceDash}} >> {{$transformationName}}
{{- end -}}

{{$transformationName}} >> {{ if .Hooks.Post }} [
{{- range $_, $h := .Hooks.Post }}
    hook_{{$h.Name | ReplaceDash}},
{{- end -}} ] >> {{- end -}} {{- if .Hooks.Fail }} [
{{- range $_, $h := .Hooks.Fail }}
   hook_{{$h.Name | ReplaceDash}},
{{- end -}} ] >> {{- end -}} publish_job_end_event

# set inter-dependencies between hooks and hooks
{{- range $before, $after := .Hooks.Dependencies }}
hook_{{$before.Name | ReplaceDash}} >> hook_{{$after.Name | ReplaceDash}} >> publish_job_end_event
{{- end }}
